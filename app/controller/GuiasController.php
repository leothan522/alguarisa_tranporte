<?php

namespace app\controller;

use app\middleware\Admin;
use app\model\Chofere;
use app\model\Empresa;
use app\model\Guia;
use app\model\GuiasCarga;
use app\model\GuiasTipo;
use app\model\Municipio;
use app\model\Parametro;
use app\model\Parroquia;
use app\model\RutasTerritorio;
use app\model\Vehiculo;
use app\model\VehiculoTipo;

class GuiasController extends Admin
{
    public string $TITTLE = 'Guias';
    public string $MODULO = 'guias.index';

    public $rows;
    public $totalRows;
    public $links;
    public $limit;
    public $offset;
    public $keyword;
    public $prueba;

    public int $GUIAS_NUM_INIT = 0;
    public int $ID_GUIAS_NUM_INIT = 0;
    public string $FORMATO_GUIA_PDF = 'null';


    //variables exclusivas para el pdf
    public $codigo, $guias_tipos_id, $tipos_nombre, $vehiculos_id, $vehiculos_tipo, $vehiculos_marca,
        $vehiculos_placa_batea, $vehiculos_placa_chuto, $vehiculos_color, $vehiculos_capacidad, $choferes_id,
        $choferes_cedula, $choferes_nombre, $choferes_telefono, $territorios_origen, $territorios_destino, $rutas_id,
        $rutas_origen, $rutas_destino, $rutas_ruta, $fecha, $user_id, $band, $created_at, $auditoria, $deleted_at,
        $pdf_id, $pdf_impreso, $estatus, $precinto, $precinto_2, $version, $origen_municipio, $destino_municipio, $trayecto,
        $color_cargamento = [], $listarCargamento;


    public function isAdmin()
    {
        parent::isAdmin(); // TODO: Change the autogenerated stub
        if (!validarPermisos($this->MODULO)) {
            header('location: ' . ROOT_PATH . 'admin\\');
        }
        $this->getNumeroGuia();
        $this->index();
        $this->getFormato();
    }

    public function getVehiculo($id)
    {
        $model = new Vehiculo();
        $modelEmpresa = new Empresa();
        $vehiculos = $model->find($id);
        $empresas = $modelEmpresa->find($vehiculos['empresas_id']);
        $choferes = new ChoferesController();
        $tipo = $choferes->getTipo($vehiculos['tipo']);

        $response = crearResponse(
            false,
            true,
            'Get Chofer',
            'Get Chofer',
            'success',
            false,
            true
        );
        $response['placa_batea'] = $vehiculos['placa_batea'];
        $response['marca'] = $vehiculos['marca'];
        $response['tipo'] = $tipo['nombre'];
        $response['color_vehiculo'] = $vehiculos['color'];
        $response['placa_chuto'] = $vehiculos['placa_chuto'];
        $response['rif'] = $empresas['rif'];
        $response['nombre'] = verUtf8($empresas['nombre']);
        $response['responsable'] = verUtf8($empresas['responsable']);
        $response['telefono'] = $empresas['telefono'];

        return $response;
    }

    public function getEmpresas()
    {
        $model = new Empresa();
        return $model->getAll('1');
    }

    public function getColor(): array
    {
        $model = new Parametro();
        $color = [0, 0, 0];
        $parametro = $model->first('nombre', '=', 'guias_color_rgb');
        if ($parametro) {
            switch ($parametro['valor']) {
                case 'black':
                    $r = 0;
                    $g = 0;
                    $b = 0;
                    break;

                case 'blue':
                    $r = 0;
                    $g = 0;
                    $b = 128;
                    break;


                default:

                    $valor = strpos($parametro['valor'], ',');
                    if ($valor === false) {
                        $r = 0;
                        $g = 0;
                        $b = 0;
                    } else {
                        $explode = explode(',', $parametro['valor']);
                        if (count($explode) === 3) {
                            if (is_numeric($explode[0]) && ($explode[0] >= 0) && ($explode[0] <= 255)) {
                                $r = $explode[0];
                            } else {
                                $r = 0;
                            }

                            if (is_numeric($explode[1]) && ($explode[1] >= 0) && ($explode[1] <= 255)) {
                                $g = $explode[1];
                            } else {
                                $g = 0;
                            }

                            if (is_numeric($explode[2]) && ($explode[2] >= 0) && ($explode[2] <= 255)) {
                                $b = $explode[1];
                            } else {
                                $b = 0;
                            }

                        } else {
                            $r = 0;
                            $g = 0;
                            $b = 0;
                        }
                    }

                    break;
            }
            $color = [$r, $g, $b];
        }
        return $color;
    }

    public function getNumeroGuia()
    {
        $model = new Parametro();
        $parametro = $model->first('nombre', '=', 'guias_num_init');
        if ($parametro) {
            $this->GUIAS_NUM_INIT = $parametro['valor'];
            $this->ID_GUIAS_NUM_INIT = $parametro['id'];
        }
    }

    public function setNumeroGuia($num_guia)
    {
        $this->getNumeroGuia();
        $actual = $this->GUIAS_NUM_INIT;
        $model = new Parametro();

        if ($num_guia > $actual || $this->USER_ROLE > 99) {
            if ($this->ID_GUIAS_NUM_INIT) {
                $model->update($this->ID_GUIAS_NUM_INIT, 'valor', $num_guia);
            } else {
                $data = [
                    'guias_num_init',
                    null,
                    $num_guia
                ];
                $model->save($data);
            }
            $response = crearResponse(
                false,
                true,
                'Numero de Guia Actualizado.' . $this->ID_GUIAS_NUM_INIT
            );
        } else {
            if ($num_guia == $actual) {
                $response = crearResponse(
                    'sin_cambios',
                    false,
                    'Proximo Número de Guía',
                    'No se realizo ningun cambio.',
                    'warning',
                    true
                );
            } else {
                $response = crearResponse(
                    'numero_menor',
                    false,
                    '¡Número Menor!',
                    'El nuevo número para las Guias debe ser mayor al número actual. El número actual es ' . formatoMillares($actual, 0),
                    'warning',
                    true
                );
            }

        }
        return $response;

    }

    public function index(
        $baseURL = '_request/GuiasRequest.php',
        $tableID = 'table_guias',
        $limit = null,
        $totalRows = null,
        $offset = null,
        $opcion = 'paginate',
        $contentDiv = 'div_guias'
    )
    {

        $model = new Guia();
        if (is_null($limit)) {
            $this->limit = numRowsPaginate();
        } else {
            $this->limit = $limit;
        }
        if (is_null($totalRows)) {
            $this->totalRows = $model->count(1);
        } else {
            $this->totalRows = $totalRows;
        }
        $this->offset = $offset;

        $this->links = paginate(
            $baseURL,
            $tableID,
            $this->limit,
            $this->totalRows,
            $offset,
            $opcion,
            $contentDiv
        )->createLinks();

        $this->rows = $model->paginate($this->limit, $offset, 'id', 'DESC', 1);
    }

    public function getGuiaPrint($id)
    {
        $redireccionar = false;
        if (empty($id)) {
            $redireccionar = true;
        }
        $model = new Guia();
        $modelCargamento = new GuiasCarga();

        $guia = $model->find($id);

        if ($guia) {
            //sigo procesando
            $this->codigo = $guia['codigo'];
            $this->guias_tipos_id = $guia['guias_tipos_id'];
            $this->tipos_nombre = mb_strtoupper(verUtf8($guia['tipos_nombre']));
            $this->vehiculos_id = $guia['vehiculos_id'];
            $this->vehiculos_tipo = verUtf8($guia['vehiculos_tipo']);
            $this->vehiculos_marca = mb_strtoupper(verUtf8($guia['vehiculos_marca']));
            $this->vehiculos_placa_batea = mb_strtoupper(verUtf8($guia['vehiculos_placa_batea']));
            $this->vehiculos_placa_chuto = mb_strtoupper(verUtf8($guia['vehiculos_placa_chuto']));
            $this->vehiculos_color = mb_strtoupper(verUtf8($guia['vehiculos_color']));
            $this->vehiculos_capacidad = mb_strtoupper($guia['vehiculos_capacidad']);
            $this->choferes_id = $guia['choferes_id'];
            $this->choferes_cedula = formatoMillares($guia['choferes_cedula']);
            $this->choferes_nombre = mb_strtoupper($guia['choferes_nombre']);
            $this->choferes_telefono = $guia['choferes_telefono'];
            $this->territorios_origen = $guia['territorios_origen'];
            $this->territorios_destino = $guia['territorios_destino'];
            $this->rutas_id = $guia['rutas_id'];
            $this->rutas_origen = mb_strtoupper(verUtf8($guia['rutas_origen']));
            $this->rutas_destino = mb_strtoupper(verUtf8($guia['rutas_destino']));
            $this->rutas_ruta = $guia['rutas_ruta'];
            $this->fecha = verFecha($guia['fecha']);
            $this->user_id = $guia['users_id'];
            $this->band = $guia['band'];
            $this->created_at = $guia['created_at'];
            $this->auditoria = $guia['auditoria'];
            $this->deleted_at = $guia['deleted_at'];
            $this->pdf_id = $guia['pdf_id'];
            $this->pdf_impreso = $guia['pdf_impreso'];
            $this->estatus = $guia['estatus'];
            if ($this->precinto) {
                $this->precinto = mb_strtoupper(verUtf8($guia['precinto']));
            }
            if ($this->precinto_2) {
                $this->precinto_2 = mb_strtoupper(verUtf8($guia['precinto_2']));
            }
            $this->version = $guia['version'];
            $this->origen_municipio = $this->getGuiaMunicipio($this->territorios_origen, $this->version);
            $this->destino_municipio = $this->getGuiaMunicipio($this->territorios_destino, $this->version);


            $ruta = "";
            if (is_array(json_decode($this->rutas_ruta))) {
                $listarTerritorios = json_decode($guia['rutas_ruta']);
                foreach ($listarTerritorios as $lugar) {
                    $ruta .= ucfirst($lugar) . ", ";
                }
            }

            $this->trayecto = $ruta;

            switch ($guia['guias_tipos_id']) {
                case 2:
                    $r = 255;
                    $g = 95;
                    $b = 53;
                    $this->color_cargamento = [$r, $g, $b];
                    break;
                default:
                    $r = 51;
                    $g = 246;
                    $b = 255;
                    $this->color_cargamento = [$r, $g, $b];
                    break;
            }

            $this->listarCargamento = $modelCargamento->getList('guias_id', '=', $guia['id']);


        } else {
            $redireccionar = true;
        }


        if ($redireccionar) {
            header('location: ' . ROOT_PATH . 'admin\\');
        }
    }

    public function getGuiaMunicipio($id, $version): string
    {
        $municipio = '';
        if ($version) {
            //consulta las tablas nuevas
            $model = new Parroquia();
            $modelMunicipio = new Municipio();
            $modelParametro = new Parametro();
            $ruta = $model->find($id);
            $get_municipio = $modelMunicipio->find($ruta['municipios_id']);

            if ($ruta) {
                $capital = '';
                $parametro = $modelParametro->first('nombre', '=', 'id_capital_estado');
                if ($parametro) {
                    if ($parametro['tabla_id'] == $get_municipio['id']) {
                        $capital = ' CAPITAL';
                    }
                }
                $municipio = mb_strtoupper(verUtf8($get_municipio['nombre'] . $capital));
            }

        } else {
            //consulto la tabla vieja
            $model = new RutasTerritorio();
            $ruta = $model->find($id);

            if ($ruta) {
                $municipio = mb_strtoupper(verUtf8($ruta['municipio']));
            }

        }
        return $municipio;
    }

    public function getFormato()
    {
        $model = new Parametro();
        $parametro = $model->first('nombre', '=', 'guias_formatos_pdf');

        if ($parametro) {
            //sequimos
            if (!empty($parametro['valor']) && is_string($parametro['valor'])) {
                if (url_exists(public_url('admin/guias/_storage/formatos/' . $parametro['valor'] . '/'))) {
                    $this->FORMATO_GUIA_PDF = public_url('admin/guias/_storage/formatos/' . $parametro['valor'] . '/');
                } else {
                    $this->FORMATO_GUIA_PDF = public_url('admin/guias/_storage/formatos/');
                }
            } else {
                $this->FORMATO_GUIA_PDF = public_url('admin/guias/_storage/formatos/');
            }
        } else {
            $this->FORMATO_GUIA_PDF = public_url('admin/guias/_storage/formatos/');
        }
    }
    
    public function search($keyword)
    {

        $sql_fecha =  ''; //"fecha LIKE '%$keyword%'";
        $sql_codigo = ''; //"codigo LIKE '%$keyword%'";
        $sql_destino = ''; //"rutas_destino LIKE '%$keyword%'";
        $sql_chofer = ''; //"choferes_nombre LIKE '%$keyword%'";
        $sql_placa = ''; //"vehiculos_placa_batea LIKE '%$keyword%' ";

        $or_1 = '';
        $or_2 = '';
        $or_3 = '';
        $or_4 = '';
        $and = '';

        //validamos si es una fecha
        if (strtotime($keyword)){
            $fecha = verFecha($keyword, "Y-m-d");
            $sql_fecha = " fecha LIKE '%$fecha%' ";
        }else{

            $explode = explode('-', $keyword, 2);
            if (count($explode) > 1){
                //$this->prueba = count($explode);
                $mes = null;
                $year = null;
                if (validateSizeNumber($explode[1], 4)){
                    $year = $explode[1];
                }

                if (mesEspanol($explode[0])){
                    $mes = cerosIzquierda(mesEspanol($explode[0]), 2);
                }

                if ($mes && $year){
                    $sql_fecha = " fecha LIKE '%$year-$mes%' ";
                }else{
                    $sql_codigo = " codigo LIKE '%$keyword%' ";
                    $sql_destino = " rutas_destino LIKE '%$keyword%' ";
                    $sql_chofer = " choferes_nombre LIKE '%$keyword%' ";
                    $sql_placa = " vehiculos_placa_batea LIKE '%$keyword%' ";
                }

            }else{
                $sql_codigo = " codigo LIKE '%$keyword%' ";
                $sql_destino = " rutas_destino LIKE '%$keyword%' ";
                $sql_chofer = " choferes_nombre LIKE '%$keyword%' ";
                $sql_placa = " vehiculos_placa_batea LIKE '%$keyword%' ";
            }
        }


        if (!empty($sql_fecha) && !empty($sql_codigo)){
            $or_1 = 'OR';
        }

        if (!empty($sql_codigo) && !empty($sql_destino)){
            $or_2 = 'OR';
        }

        if (!empty($sql_destino) && !empty($sql_chofer)){
            $or_3 = 'OR';
        }

        if (!empty($sql_chofer) && !empty($sql_placa)){
            $or_4 = 'OR';
        }

        if (!empty($sql_fecha) || !empty($sql_codigo) || !empty($sql_destino) || !empty($sql_chofer) || !empty($sql_placa)){
            $and = 'AND';
        }

        $model = new Guia();
        $sql = "SELECT * FROM guias WHERE 
        $sql_fecha 
        $or_1
        $sql_codigo 
        $or_2
        $sql_destino
        $or_3
        $sql_chofer
        $or_4
        $sql_placa
        $and
        band = 1;";

        $this->rows = $model->sqlPersonalizado($sql, 'getAll');
        $this->keyword = $keyword;
    }

    public function getGuia($id): array
    {
        $model = new Guia();
        $modelCarga = new GuiasCarga();
        $guia = $model->find($id);
        $cargamento = $modelCarga->getList('guias_id', '=', $id);
        $response = crearResponse(
            false,
            true,
            'Editar Guia',
            'Editar Guia',
            'success',
            false,
            true
        );
        $response['id'] = $guia['id'];
        $response['tipo'] = $guia['guias_tipos_id'];
        $response['codigo'] = $guia['codigo'];
        $response['vehiculo'] = $guia['vehiculos_id'];
        $response['chofer'] = $guia['choferes_id'];
        $response['origen'] = $guia['territorios_origen'];
        $response['destino'] = $guia['territorios_destino'];
        $response['fecha'] = verFecha($guia['fecha']);
        $response['precinto'] = $guia['precinto'];
        $response['precinto_2'] = $guia['precinto_2'];
        foreach ($cargamento as $carga){
            $id = $carga['id'];
            $cantidad = $carga['cantidad'];
            $descripcion = $carga['descripcion'];
            $response['listarCarga'][] = array("id" => mb_strtoupper($id), "cantidad" => $cantidad, "descripcion" => mb_strtoupper($descripcion));
        }

        return $response;
    }

    public function showGuia($id): array
    {
        $model = new Guia();
        $modelCarga = new GuiasCarga();
        $modelGuiasTipo = new GuiasTipo();
        $guia = $model->find($id);
        $cargamento = $modelCarga->getList('guias_id', '=', $id);
        $tipoGuia = $modelGuiasTipo->find($guia['guias_tipos_id']);
        $response = crearResponse(
            false,
            true,
            'show Guia',
            'show Guia',
            'success',
            false,
            true
        );
        $response['id'] = $guia['id'];
        $response['destino'] = $guia['rutas_destino'];
        $response['codigo'] = $guia['codigo'];
        $response['fecha'] = verFecha($guia['fecha']);
        $response['tipo'] = $tipoGuia['nombre'];
        $response['origen'] = $guia['rutas_origen'];
        foreach ($cargamento as $carga){
            $id = $carga['id'];
            $cantidad = $carga['cantidad'];
            $descripcion = $carga['descripcion'];
            $response['listarCarga'][] = array("id" => mb_strtoupper($id), "cantidad" => $cantidad, "descripcion" => mb_strtoupper($descripcion));
        }
        $response['vehiculo_tipo'] = $guia['vehiculos_tipo'];
        $response['vehiculo_placa_batea'] = $guia['vehiculos_placa_batea'];
        $response['vehiculo_placa_chuto'] = $guia['vehiculos_placa_chuto'];
        $response['vehiculo_marca'] = $guia['vehiculos_marca'];
        $response['vehiculo_color'] = $guia['vehiculos_color'];
        $response['vehiculo_capacidad'] = $guia['vehiculos_capacidad'];
        $response['chofer'] = $guia['choferes_nombre'];
        $response['chofer_cedula'] = formatoMillares($guia['choferes_cedula']);
        $response['chofer_telefono'] = $guia['choferes_telefono'];

        return $response;
    }

    public function getTipoVehiculo($id = null)
    {
        $model = new VehiculoTipo();

        if ($id) {
            return $model->first('id', '=', $id);
        }

        return $model->getAll();
    }

    public function getSelectGuia()
    {
        $model = new Guia();
        $modelTerritorio = new Parroquia();
        $modelGuiasTipo = new GuiasTipo();
        $modelVehiculos = new Vehiculo();
        $modelChofer = new Chofere();

        $guia = $model->getAll(1);
        $sql = "SELECT * FROM parroquias WHERE estatus = '1';";
        $parroquias = $modelTerritorio->sqlPersonalizado($sql, 'getAll');
        $guiasTipo = $modelGuiasTipo->getAll();
        $vehiculos = $modelVehiculos->getAll(1);
        $chofer = $modelChofer->getAll(1);


        $response = [
            'guia' => $guia,
            'territorio' => $parroquias,
            'guiasTipo' => $guiasTipo,
            'vehiculos' => $vehiculos,
            'choferes' => $chofer
        ];
        return $response;

    }
}